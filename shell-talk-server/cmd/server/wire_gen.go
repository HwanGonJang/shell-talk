// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"shell-talk-server/internal/config"
	"shell-talk-server/internal/hub"
	"shell-talk-server/internal/repository/mongo"
	"shell-talk-server/internal/repository/postgres"
	"shell-talk-server/internal/service"
)

// Injectors from wire.go:

// InitializeApp creates a new application.
func InitializeApp() (*App, func(), error) {
	configConfig := config.Load()
	db, cleanup, err := providePostgresDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepository := postgres.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	roomRepository := postgres.NewRoomRepository(db)
	roomService := service.NewRoomService(roomRepository)
	context, cleanup2 := provideContext()
	database, cleanup3, err := provideMongoDB(context, configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	messageRepository := mongo.NewMessageRepository(database)
	hubHub := hub.NewHub(userService, roomService, messageRepository)
	app := &App{
		Hub: hubHub,
	}
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// App is the main application container.
type App struct {
	Hub *hub.Hub
}
